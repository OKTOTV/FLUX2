<?php

namespace AppBundle\Entity\Repository;

use Bprs\UserBundle\Entity\UserRepository as BaseRepository;
use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends BaseRepository
{
    public function findFavorites($user, $number = 10, $query_only = false)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT f FROM AppBundle:Episode f
                JOIN f.users u
                JOIN f.series s
                WHERE u.id = :user
                AND f.isActive = 1
                ORDER BY f.onlineStart DESC"
            )
            ->setParameter('user', $user->getId());

        if ($query_only) {
            return $query;
        }

        return $query->setMaxResults($number)->getResult();
    }

    public function findPlaylists($user, $number = 10, $query_only = false)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT p FROM AppBundle:Playlist p
                JOIN p.user u
                WHERE u.id = :user_id
                ORDER BY p.createdAt DESC"
            )
            ->setParameter('user_id', $user->getId());
        if ($query_only) {
            return $query;
        }
        return $query->setMaxResults($number)->getResult();
    }

    public function findAbonnements($user, $number = 10, $query_only = false)
    {
        $query = $this->getEntityManager()->createQuery(
                "SELECT a FROM AppBundle:Abonnement a
                WHERE a.user = :user_id
                ORDER BY a.createdAt DESC"
            )
            ->setParameter('user_id', $user->getId());

        if ($query_only) {
            return $query;
        }
        return $query->setMaxResults($number)->getResult();
    }


// TODO: check abonnementService and simplify this

    public function findAboUsersWithNotificationForNewEpisodes($series, $withEmail = false)
    {
        return $this->findAboUsersWithNotificationForNewEpisodesQuery($series, $withEmail)->getResult();
    }

    public function findAboUsersWithNotificationForNewEpisodesQuery($series, $withEmail = false)
    {
        if ($withEmail) {
            return $this->getEntityManager()
                ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.newEpisode = 1 AND a.send_mails = 1')
                ->setParameter('series_id', $series->getId());
        }
        return $this->getEntityManager()
            ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.newEpisode = 1')
            ->setParameter('series_id', $series->getId());
    }

    public function findAboUsersWithNotificationForLivestream($series, $withEmail = false)
    {
        return $this->findAboUsersWithNotificationForLivestreamQuery($series, $withEmail)->getResult();
    }

    public function findAboUsersWithNotificationForLivestreamQuery($series, $withEmail = false)
    {
        if ($withEmail) {
            return $this->getEntityManager()
                ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.livestream = 1 AND a.send_mails = 1')
                ->setParameter('series_id', $series->getId());
        }
        return $this->getEntityManager()
            ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.livestream = 1')
            ->setParameter('series_id', $series->getId());
    }

    public function findAboUsersWithNotificationNewPost($series, $withEmail = false)
    {
        return $this->findAboUsersWithNotificationNewPostQuery($series, $withEmail)->getResult();
    }

    public function findAboUsersWithNotificationNewPostQuery($series, $withEmail = false)
    {
        if ($withEmail) {
            return $this->getEntityManager()
                ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.new_post = 1 AND a.send_mails = 1')
                ->setParameter('series_id', $series->getId());
        }
        return $this->getEntityManager()
            ->createQuery('SELECT u FROM AppBundle:User u JOIN u.abonnements a WHERE a.series = :series_id AND a.new_post = 1')
            ->setParameter('series_id', $series->getId());
    }
}
